datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobOffers     UserJobOffer[] 
  first_name        String? @default("")
  last_name         String? @default("")
  address          String? @default("")
  city             String? @default("")
  zip             String? @default("")
  country         String? @default("")
  phone           String? @default("")
  resume         String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model JobOffer {
  url           String     @id
  title         String
  company       String
  location      String
  description   String
  datePosted    DateTime
  companyLogo   String
  employmentType String
  slug          String     @unique

  
  users UserJobOffer[] 
}

model UserJobOffer {
  userId    String
  jobOfferId String
  coverLetter   String? @default("")
  status        String @default("")
  applicationDate DateTime @default(now())



  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobOffer  JobOffer @relation(fields: [jobOfferId], references: [url], onDelete: Cascade)

  @@id([userId, jobOfferId]) 
}
